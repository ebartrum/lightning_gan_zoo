# @package _global_
name: graf
train:
  # batch_size: 8
  batch_size: 4
  # img_size: 128
  img_size: 32
  # noise_dim: 256
  noise_dim: 32
  # noise_appearance_dim: 128         # This dimension is subtracted from "dim"
  noise_appearance_dim: 16         # This dimension is subtracted from "dim"
  chunk: 32768                # 1024*32
  netchunk: 65536             # 1024*64
  training_step:
    _target_: core.training_steps.graf
  take_model_average: False
  # take_model_average: True
optimisation:
  disc_lr: 1e-4
  gen_lr: 5e-4
  disc_freq: 1
  lr_anneal: 1.
  anneal_every: 150000
disc_optimiser:
  _target_: torch.optim.RMSprop
  lr: "${optimisation.disc_lr}"
gen_optimiser:
  _target_: torch.optim.RMSprop
  lr: "${optimisation.gen_lr}"
loss_weight:
  reg: 10
generator:
  _target_: core.submodules.graf.graf.config.build_generator
  config:
      nerf: "${nerf}"
      train: "${train}"
      data: "${data}"
      ray_sampler: "${ray_sampler}"
discriminator:
  _target_: core.submodules.graf.graf.models.discriminator.Discriminator
  nc: 3
  # ndf: 64
  ndf: 16
  hflip: False                # Randomly flip discriminator input horizontally
  n_ray_samples: "${ray_sampler.N_samples}"
nerf:
  i_embed: 0
  use_viewdirs: True
  multires: 10
  multires_views: 4
  # N_samples: 64
  N_samples: 16
  N_importance: 0
  netdepth: 8
  # netwidth: 256
  netwidth: 32
  netdepth_fine: 8
  netwidth_fine: 32
  # netwidth_fine: 256
  perturb: 1.
  raw_noise_std: 1.
  decrease_noise: True
data:
  white_bkgd: False
  radius: 9.5,10.5
  near: 7.5
  far: 12.5
  fov: 10.
  umin: 0
  umax: 0.25
  vmin: 0.32898992833716556 # 70 deg
  vmax: 0.45642212862617093   # 85 deg
  orthographic: False
ray_sampler:
  min_scale: 0.25
  max_scale: 1.
  scale_anneal: 0.0025        # no effect if scale_anneal<0, else the minimum scale decreases exponentially until converge to min_scale
  N_samples: 1024             # 32*32, patchsize
defaults:
  - /figures@figures.graf_sample_grid: graf_sample_grid
  - override /dataset: mnist
